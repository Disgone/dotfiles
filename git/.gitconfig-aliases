# This can be referenced in your .gitconfig by adding the following section:
#
# [include]
#    path = ~/.gitconfig-aliases
#
# A lot of these were picked up over time
#  http://haacked.com/archive/2019/02/14/including-git-aliases/
#  https://mijingo.com/blog/how-to-create-git-aliases
#  https://www.30secondsofcode.org/articles/s/git-aliases

[alias]
    # This reads the default branch for the repository.
    default = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'

    # Sets the branch being tracked as origin/head
    set-default = "!f() { name=${1-master}; git remote set-head origin $name; git symbolic-ref refs/remotes/origin/HEAD; };f"

    # Opens the global config in the default editor.
    myconfig = config --global -e

    # List the available aliases when your memory starts to slip
    aliases = "!git config -l | grep ^alias\\. | cut -c 7- | sort"

    # Opens a remote repo
    open = "!f(){ URL=$(git config remote.origin.url); start chrome ${URL}; }; f"

    ## Shortcut aliases in case I'm feeling lazy
    ## Cause sometimes 'checkout' is just too many letters.
    #######################################################
    co = checkout
    # Checkout, but the default branch
    cod = "!git checkout $(git default)"
    aa = add --all
    au = add --update
    ca = commit --amend
    cm = commit --message
    cp = cherry-pick
    ls = ls-files -s
    dt = difftool
    mt = mergetool
    ss = stash save
    nb = checkout -b

    # Branches, for my stupid brain will list all local branches.
    branches = branch -l

    stashes = stash list --date=human

    # Creates a checkpoint commit with all files -- including unstaged
    checkpoint = !git add -A && git commit -m 'CHECKPOINT'
    
    # Reverts the previous commit
    undo = reset HEAD~1 --mixed

    # Disable change tracking
    pause = update-index --assume-unchanged

    # Resume change tracking
    unpause = update-index --no-assume-unchanged

    # Pulls the workspace into sync with the remote
    # This can accept additional args.
    up = !git pull --rebase --prune $@

    # Git log, but for humans
    logh = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]\\ %Cgreen\\ (%cd)" --decorate --date=human

    # List the most commonly changed files
    churn = !git --no-pager log --name-only --oneline | grep -v ' ' | sort | uniq -c | sort -nr | head

    find = !git ls-files | grep -i

    pushf = push --force-with-lease

    # Purge/cleanup
    # !!! These guys should be used with caution !!!
    ################################################

    # Use the force to delete the branch
    # git trim my-local-branch
    trim = branch -D

    # Purges all untracked files/directories
    purge = "!git clean -fdx $@"

    # Force deletes all branches
    buzzsaw = "!git branch -D $(git branch)"

    # Deletes all branches which have been merged into the specified branch
    # If no branch is provied, use the current default branch
    trim-merged = "!f() { DEFAULT=$(git default); git branch --merged ${1-$DEFAULT} | grep -v \" ${1-$DEFAULT}$\" | xargs git branch -d; };f"

    # Once a story is merge complete it's time to get ready for the next one
    # Switch to the defualt branch, update the workspace and removed merged branches
    rdone = "!f() { DEFAULT=$(git default); git checkout ${1-$DEFAULT} && git up && git trim-merged ${1-$DEFAULT}; };f"

    # Branching Helpers
    ###################

    # Pushes a new local branch to origin
    # Cause nobody ever remembers the syntax for --set-upstream
    po = "!git push --set-upstream origin \"$(git rev-parse --abbrev-ref HEAD)\""

    # Pull changes for a branch and rebase them into the current
    pullin = "!f() { DEFAULT=$(git default); git fetch origin && git rebase origin/${1-$DEFAULT}; };f"

    # git feature my-feature-name => feature/my-feature-name
    feature = "!f() { NAME=${1?branch name is required}; git checkout -b feature/$NAME; };f"

    # git story my-story-name 51120 => story/51120-my-story-name
    story = "!f() { NAME=${1?branch name is required}; WORKNUM=${2-'000'}; git checkout -b story/$WORKNUM-$NAME; };f"

    # git bugfix my-bug-name 55102 => bugfix/55102-my-bug-name
    bugfix = "!f() { NAME=${1?branch name is required}; WORKNUM=${2-'000'}; git checkout -b bugfix/$WORKNUM-$NAME; };f"

    # Creates a new worktree in a separate location; Useful for cases where you may need to pop into another branch
    # but don't want to disturb your current workspace. e.g. There is a bug in production and you wanna peek at master
    # git damnit main c:\my-new-path
    damnit = "!f() { DEFAULT=$(git default); NAME=${2-$DEFAULT}; git worktree add ${1} $NAME -b worktree/$NAME; };f"